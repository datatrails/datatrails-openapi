{
    "swagger": "2.0",
    "info": {
        "title": "Tenancies API",
        "description": "API to manage tenancies",
        "version": "1.0",
        "contact": {
            "name": "DataTrails",
            "url": "https://www.datatrails.ai"
        }
    },
    "tags": [
        {
            "name": "Tenancies",
            "description": "Manage your tenancy"
        },
        {
            "name": "TenanciesUsers",
            "description": "Manage users in your tenancy"
        }
    ],
    "basePath": "/archivist/v1/tenancies",
    "schemes": [
        "https"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/archivist/v1/tenancies/self": {
            "get": {
                "summary": "Get tenant record",
                "description": "Returns an administrator's view of tenant for which they're authenticated",
                "operationId": "Tenancies_GetAdminTenantInfo",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1AdminTenantResponse"
                        }
                    },
                    "400": {
                        "description": "Supplied parameters were invalid"
                    },
                    "401": {
                        "description": "Returned when the user is not authenticated to the system."
                    },
                    "403": {
                        "description": "Returned when the user is not authorized to retrieve the tenant id."
                    }
                },
                "tags": [
                    "Tenancies"
                ]
            },
            "patch": {
                "summary": "Update tenant record",
                "description": "Enables a root principal of the tenant to update the tenant record.",
                "operationId": "Tenancies_UpdateTenant",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1AdminTenantResponse"
                        }
                    },
                    "400": {
                        "description": "Returned when the request is badly formed."
                    },
                    "401": {
                        "description": "Returned when the user is not authenticated to the system."
                    },
                    "403": {
                        "description": "Returned when the user is not authorized to perform this action."
                    },
                    "404": {
                        "description": "Returned when the referenced tenant does not exist."
                    }
                },
                "parameters": [
                    {
                        "name": "tenant",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1UpdatableTenantPayload"
                        }
                    },
                    {
                        "name": "mask",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Tenancies"
                ]
            }
        },
        "/archivist/v1/tenancies/{uuid}:publicinfo": {
            "get": {
                "summary": "Public Tenant Information.",
                "description": "Return the publically avaialble tenant information.",
                "operationId": "Tenancies_GetPublicTenantInfo",
                "responses": {
                    "200": {
                        "description": "A successful response.",
                        "schema": {
                            "$ref": "#/definitions/v1GetPublicTenantInfoResponse"
                        }
                    }
                },
                "parameters": [
                    {
                        "name": "uuid",
                        "description": "Specify the tenant UUID where `tenant/{uuid}` is the Tenant Identity e.g. `add30235-1424-4fda-840a-d5ef82c4c96f` from Identity `tenant/add30235-1424-4fda-840a-d5ef82c4c96f`",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "tags": [
                    "Tenancies"
                ]
            }
        }
    },
    "definitions": {
        "v1AdminTenantResponse": {
            "type": "object",
            "example": {
                "identity": "tenant/08838336-c357-460d-902a-3aba9528dd22",
                "verified_domain": "foo.com",
                "display_name": "My First Tenancy",
                "enterprise_sso_enabled": true,
                "enterprise_sso_config": {
                    "policy_id": "foo",
                    "config_url": "foo",
                    "issuer": "foo",
                    "client_id": "foo",
                    "client_secret": ""
                }
            },
            "properties": {
                "identity": {
                    "type": "string",
                    "description": "tenant identity `{UUID}`",
                    "readOnly": true
                },
                "verified_domain": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string",
                    "description": "Customer friendly name for the tenant.",
                    "maxLength": 128
                },
                "enterprise_sso_enabled": {
                    "type": "boolean"
                },
                "enterprise_sso_config": {
                    "$ref": "#/definitions/v1EnterpriseSSOConfig"
                }
            },
            "description": "View of own tenant record for a root principal."
        },
        "v1EnterpriseSSOConfig": {
            "type": "object",
            "properties": {
                "policy_id": {
                    "type": "string",
                    "description": "Per-tenant B2C policy ID",
                    "readOnly": true
                },
                "config_url": {
                    "type": "string"
                },
                "issuer": {
                    "type": "string"
                },
                "client_id": {
                    "type": "string"
                },
                "client_secret": {
                    "type": "string",
                    "description": "The secret passed here when setting, but must not be stored in plaintext or logged."
                }
            },
            "title": "This is used for PATCHing self - so the tenant is taken from the calling principal"
        },
        "v1GetLimitsForCurrentTenantResponse": {
            "type": "object",
            "properties": {
                "limits": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "description": "map of caps for authenticated principal's tenancy",
                    "readOnly": true
                }
            }
        },
        "v1GetManyTenantsResponse": {
            "type": "object",
            "properties": {
                "tenants": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/v1TenantResponse"
                    }
                }
            }
        },
        "v1GetPublicTenantInfoResponse": {
            "type": "object",
            "example": {
                "identity": "tenant/add30235-1424-4fda-840a-d5ef82c4c96f",
                "verified_domain": "exampleltd"
            },
            "properties": {
                "identity": {
                    "type": "string"
                },
                "verified_domain": {
                    "type": "string"
                }
            },
            "description": "Publically available information for a tenant.",
            "title": "Get publicly available information for a specific tenant"
        },
        "v1InviteTokenHintResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                },
                "expiry_time": {
                    "type": "string",
                    "format": "date-time",
                    "description": "invite expiry time",
                    "readOnly": true
                }
            }
        },
        "v1ListDealTenantsResponse": {
            "type": "object",
            "properties": {
                "tenants": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/v1TenantResponse"
                    }
                },
                "next_page_token": {
                    "type": "string"
                }
            }
        },
        "v1ListTenantsResponse": {
            "type": "object",
            "properties": {
                "tenants": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/v1TenantResponse"
                    }
                },
                "next_page_token": {
                    "type": "string"
                }
            }
        },
        "v1QuorumNetwork": {
            "type": "object",
            "properties": {
                "node_address": {
                    "type": "string",
                    "description": "scheme://host:port for the tenants resident quorum node",
                    "maxLength": 1024,
                    "minLength": 1
                },
                "tessera_address": {
                    "type": "string",
                    "description": "scheme://host:port of tenants resident tessera node if privacy preserving transactions are enabled for the tenant",
                    "maxLength": 1024,
                    "minLength": 1
                },
                "tessera_key": {
                    "type": "string",
                    "description": "Tessera key.",
                    "title": "DLT tessera public key. Not currently used anywhere?",
                    "maxLength": 1024,
                    "minLength": 1
                },
                "topic": {
                    "type": "string",
                    "description": "Event Sender Topic.",
                    "maxLength": 1024,
                    "minLength": 1
                },
                "is_private": {
                    "type": "boolean",
                    "description": "Is the tessaera private?"
                }
            },
            "title": "Models the interface between creators and the blockchain. Used in an internal LRU for each\ncreator service"
        },
        "v1RetentionPolicy": {
            "type": "object",
            "properties": {
                "event_visibility_period": {
                    "type": "string",
                    "format": "int64"
                }
            }
        },
        "v1TenantLimitsResponse": {
            "type": "object",
            "properties": {
                "identity": {
                    "type": "string",
                    "description": "tenant identity `{UUID}`",
                    "readOnly": true
                },
                "limits": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            }
        },
        "v1TenantResponse": {
            "type": "object",
            "properties": {
                "identity": {
                    "type": "string",
                    "description": "tenant identity `{UUID}`",
                    "readOnly": true
                },
                "root_principal": {
                    "$ref": "#/definitions/v2Principal",
                    "title": "root_principal is DEPRECATED and will be removed in a future release\nit remains for old installations and for the one true tenant IDP issuer"
                },
                "wallet_key_name": {
                    "type": "string"
                },
                "wallet_address": {
                    "type": "string"
                },
                "root_principals": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "$ref": "#/definitions/v2Principal"
                    }
                },
                "limits": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer",
                        "format": "int32"
                    }
                },
                "proof_mechanism": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v2ProofMechanism"
                    },
                    "title": "proof_mechanism includes the enabled proof_mechanism values for the tenant.\nCurrently we only support MERKLE_LOG"
                },
                "tier": {
                    "$ref": "#/definitions/v1Tier"
                },
                "quorum_networks": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/v1QuorumNetwork"
                    },
                    "title": "map of DLT networks indexed by chain ID"
                },
                "verified_domain": {
                    "type": "string",
                    "title": "verified domain for the tenant"
                },
                "display_name": {
                    "type": "string",
                    "description": "Customer friendly name for the tenant.",
                    "maxLength": 128
                },
                "last_anchor_time": {
                    "type": "string",
                    "format": "int64",
                    "title": "timestamp of last anchor"
                },
                "anchor_interval": {
                    "type": "integer",
                    "format": "int32",
                    "title": "hash schedule in seconds"
                },
                "enterprise_sso_enabled": {
                    "type": "boolean"
                },
                "enterprise_sso_config": {
                    "$ref": "#/definitions/v1EnterpriseSSOConfig"
                },
                "expired": {
                    "type": "boolean"
                },
                "deal_id": {
                    "type": "string",
                    "description": "Sales identifier for the customer deal managing this tenant."
                },
                "retention_policy": {
                    "$ref": "#/definitions/v1RetentionPolicy"
                }
            },
            "title": "Tenant information"
        },
        "v1Tier": {
            "type": "string",
            "enum": [
                "TIER_UNSPECIFIED",
                "FREE",
                "PREMIUM",
                "READONLY"
            ],
            "default": "TIER_UNSPECIFIED"
        },
        "v1TopicFromPubKeyResponse": {
            "type": "object",
            "properties": {
                "topic": {
                    "type": "string"
                }
            }
        },
        "v1UpdatableTenantPayload": {
            "type": "object",
            "properties": {
                "display_name": {
                    "type": "string",
                    "description": "Customer friendly name for the tenant.",
                    "maxLength": 128
                },
                "enterprise_sso_config": {
                    "$ref": "#/definitions/v1EnterpriseSSOConfig"
                }
            }
        },
        "v1UserTenantIDTokenHintResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "v2Principal": {
            "type": "object",
            "example": {
                "issuer": "job.idp.server/1234",
                "subject": "bob@job"
            },
            "properties": {
                "issuer": {
                    "type": "string",
                    "description": "optional issuer of the principal identity. Where the issuer is not provided the subject is treated as a free string",
                    "maxLength": 1024
                },
                "subject": {
                    "type": "string",
                    "description": "unique identifier of the principal (within issuer context)",
                    "maxLength": 1024
                },
                "display_name": {
                    "type": "string",
                    "description": "The displayable name of the end-user.  The name claim is prefered, followed by email claims, then a composite of  given_name, middle_name, family_name",
                    "maxLength": 1024
                },
                "email": {
                    "type": "string",
                    "description": "The email for the end-user if available. If email_verified is  available it is preferd. Empty if neither email_verified or email  are provided by the IdP",
                    "maxLength": 1024
                }
            },
            "description": "The principal description assured by the configured Identity  Provider. All values are according to OIDC id token claims and  standard claims.  See https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims"
        },
        "v2ProofMechanism": {
            "type": "string",
            "enum": [
                "PROOF_MECHANISM_UNSPECIFIED",
                "RESERVED1",
                "SIMPLE_HASH",
                "MERKLE_LOG"
            ],
            "default": "PROOF_MECHANISM_UNSPECIFIED"
        }
    }
}
